# Для того чтобы создавать сабклассы класса Mode надо импортировать его из abstract_mode
# Из abstract_mode так же можно импортировать logger для того чтобы получить используемый программой logger
# Из abstract_mode так же можно импортировать global_settings для того чтобы получить используемый программой экземпляр Settings
from abstract_mode import Mode


# В файле может быть любое количество сабклассов Mode. В настройках будут отображаться только эти сабклассы.
# Все .py файлы во всех папках в папке modes будут импортированы, так что будьте осторожны с выполнением кода вне классов/функций/if __name__ == '__main__'.
class Example(Mode):
    name = {
        'default': 'Название, которое будет отображаться в настройках',    # Название по умолчанию для необъявленных языков
        'Русский': '...',                                                  # Название для конкретного языка
        'English': '...',                                                  # Название для конкретного языка
    } # Может быть None или не объявлено. Тогда как замена будет использоваться название класса.
    character_selection_enabled = True # Должен ли в настройках быть доступен выбор персонажа. По умолчанию True.
    duration_selection_enabled = True # Должен ли в настройках быть доступен выбор длительности игры. По умолчанию True.
    parse_character_levels = True # Если True, бот перед началом работы пропарсит уровни и опыт персонажей, что будет отображено в bot.characters. По умолчанию True.

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs) # Единственный аргумент с ключевым словом, передаваемый программе - это bot=<Запущенный на данный момент экземпляр бота>.
                                          # Можно вызвать super().__init__() как в этом примере или присвоить self.bot (или любое другое имя свойства) самостоятельно.
                                          # ВНИМАНИЕ: __init__ вызывается до того, как у бота присвоены свойства characters, character, duration и прочие.

    # Одно из двух абстрактных свойств, которые нужно переобъявить в сабклассах Mode.
    # next_duration должен возвращать целое число в промежутке [1, 15], которое будет использовано как длительность для следующей игры.
    @property
    def next_duration(self):
        return self.bot.config.duration

    # Еще одно абстрактное свойство, которое надо переобъявить в сабклассах Mode.
    # next_character должен возвращать один из элементов листа bot.characters.
    @property
    def next_character(self):
        return next(filter(lambda x: x.name == self.config.character.lower(), self.characters))


# Главные полезные свойства класса BrawlhallaBot:
# config - содержит используемый экземпляр класса Config;
# characters - содержит список экземпляров класса Character;
# unlocked_characters - список разблокированных экземпляров класса Character;
# character - текущий выбранный персонаж, по умолчанию Bödvar;
# duration - текущая выбранная длительность, по умолчанию 15.

# Главные полезные свойства класса Config:
# character - персонаж, выбранный изначально при настройке;
# duration - длительность, выбранная изначально при настройке;
# version - текущая версия программы.

# Главные полезные свойства/методы класса Character:
# name - имя персонажа в нижнем регистре так, как оно представлено в игре;
# level - целое число, уровень персонажа (0 если parse_character_levels == False);
# xp - целое число, опыт персонажа на текущем уровне (изначально 0 если parse_character_levels == False);
# unlocked - True если персонаж доступен;
# total_xp - целое число, общее количество опыта персонажа (всегда равен xp если parse_character_levels == False);
# xp_to_next_level - целое число, опыт, необходимый для получения следующего уровня;
# xp_to_next_gold - целое число, опыт, необходимый для получения следующей награды в 120 золота;
# duration_to_next_level - длительность, необходимая для получения следующего уровня (максимум 15);
# duration_to_next_gold - длительность, необходимая для получения следующей награды в 120 золота (максимум 15);
# next_gold_level - следующий уровень, на котором наградой будет золото (максимум 100);
# get_xp_to_level(level) - опыт, необходимый чтобы получить <level> уровень (минимум 1);
# get_duration_for_xp(xp, maximum=15) - длительность необходимая для получения <xp> опыта (максимум <maximum>).


# Для дополнительных примеров можете обращаться к встроенным режимам в папке modes/default.
